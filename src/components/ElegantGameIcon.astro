---
import Image from "astro/components/Image.astro";

export interface Props {
  point: number[];
  img: ImageMetadata;
}

const { point, img } = Astro.props;
const inflationConstant = Math.PI;
const target = [0, 0];

function fixAngle(angleDeg: number) {
  return center[0] > point[0] ? -(angleDeg + 90) - 90 : angleDeg;
}
const RAD_TO_DEG = 180 / Math.PI;
const DEG_TO_RAD = Math.PI / 180;
const PI_OVER_TWO = 90 * DEG_TO_RAD;

// Visualization at https://www.desmos.com/calculator/dmkqegc1kv

const deltaX = point[0] - target[0];
const deltaY = point[1] - target[1];

const minDiameter = Math.sqrt(deltaX ** 2 + deltaY ** 2);
const radius = (minDiameter / 2) * inflationConstant;

const midpointX = (target[0] + point[0]) / 2;
const midpointY = (target[1] + point[1]) / 2;

// cosine law, a = minDiameter, b = radius, c = radius
const angleThetaRadians = Math.acos(minDiameter ** 2 / (2 * minDiameter * radius));
const offset = radius * Math.sin(angleThetaRadians);

const anglePhiRadians = PI_OVER_TWO - (PI_OVER_TWO - Math.atan(midpointX / midpointY));
const opposite = Math.sin(anglePhiRadians) * offset;
const adjacent = Math.cos(anglePhiRadians) * offset;

const negative = point[0] < target[0];
const x = midpointX + (negative ? -adjacent : adjacent);
const y = midpointY + (negative ? opposite : -opposite);

const center = [x, y];

const angleStart = fixAngle(RAD_TO_DEG * Math.asin((center[1] - point[1]) / radius));
const percentStart = (angleStart / 360) * 100;
const angleEnd = -fixAngle(RAD_TO_DEG * Math.asin((center[1] - target[1]) / radius));
const percentEnd = (angleEnd / 360) * 100;
---

<li
  class="header__game"
  style={{
    "offset-path": `circle(${radius}vmin at calc(50% + ${center[0]}vmin) calc(100% + ${center[1]}vmin))`,
    "--offset": `${percentEnd}%`,
  }}
  data-start-percent={percentStart}
  data-end-percent={percentEnd}
>
  <Image src={img} alt={""} />
</li>
