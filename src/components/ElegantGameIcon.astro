---
import Image from "astro/components/Image.astro";

export interface Props {
  point: number[];
  img: ImageMetadata;
}

const { point, img } = Astro.props;
const inflationConstant = Math.E;
const target = [0, 0];

// const ma = (controlPoint[1] - point[1]) / (controlPoint[0] - point[0]);
// const mb = (target[1] - controlPoint[1]) / (target[0] - controlPoint[0]);
// https://paulbourke.net/geometry/circlesphere/
// const x =
//   (ma * mb * (point[1] - target[1]) + mb * (point[0] + controlPoint[0]) - ma * (controlPoint[0] + target[0])) /
//   (2 * (mb - ma));
// const y = -(1 / ma) * (x - (point[0] + controlPoint[0]) / 2) + (point[1] + controlPoint[1]) / 2;

// const center = [x, y];
// const radius = Math.sqrt((center[0] - target[0]) ** 2 + (center[1] - target[1]) ** 2);
function fixAngle(angleDeg: number) {
  return center[0] > point[0] ? -(angleDeg + 90) - 90 : angleDeg;
}
const RAD_TO_DEG = 180 / Math.PI;
const DEG_TO_RAD = Math.PI / 180;

const deltaX = target[0] - point[0];
const deltaY = target[1] - point[1];

const minDiameter = Math.sqrt(deltaX ** 2 + deltaY ** 2);
const radius = (minDiameter / 2) * inflationConstant;

const midpointX = (target[0] + point[0]) / 2;
const midpointY = (target[1] + point[1]) / 2;

const angleThetaRadians = Math.acos((minDiameter ** 2 + radius ** 2 - radius ** 2) / (2 * minDiameter * radius));
const offset = radius * Math.sin(angleThetaRadians);

const anglePhiRadians = 90 * DEG_TO_RAD - angleThetaRadians;
const opposite = Math.sin(anglePhiRadians) * offset;
const adjacent = Math.cos(anglePhiRadians) * offset;

const negative = point[0] < target[0];
const x = midpointX + (negative ? -adjacent : adjacent);
const y = midpointY - opposite;

// const reciprocalSlopeX = -deltaY;
// const reciprocalSlopeY = deltaX;
// const ratio = Math.sqrt(reciprocalSlopeX ** 2 + reciprocalSlopeY ** 2) / offset;
// const x1 = reciprocalSlopeX * ratio + midpointX;
// const y1 = reciprocalSlopeY * ratio + midpointY;
// const x2 = -reciprocalSlopeX * ratio + midpointX;
// const y2 = -reciprocalSlopeY * ratio + midpointY;

const center = [x, y];

const angleStart = fixAngle(RAD_TO_DEG * Math.asin((center[1] - point[1]) / radius));
const percentStart = (angleStart / 360) * 100;
const angleEnd = -fixAngle(RAD_TO_DEG * Math.asin((center[1] - target[1]) / radius));
const percentEnd = (angleEnd / 360) * 100;
---

<li
  class="header__game"
  style={{
    "offset-path": `circle(${radius}vmin at calc(50% + ${center[0]}vmin) calc(100% + ${center[1]}vmin))`,
    "--offset": `${percentEnd}%`,
  }}
  data-start-percent={percentStart}
  data-end-percent={percentStart}
>
  <Image src={img} alt={""} />
</li>
